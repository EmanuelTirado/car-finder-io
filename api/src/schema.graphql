type User {
  id: Int!,
  firstName: String
  lastName: String
  email: String
  avatar: String
  gender: String
  dateOfBirth: String
  region: Region @relation(name: "MEMBER_OF", direction: "OUT")
  occupation: Occupation @relation(name: "MEMBER_OF", direction: "OUT")
  avgStars: Float 
    @cypher (
      statement: "MATCH (this)-[:WROTE]->(r:Review) RETURN toFloat(avg(r.starsRating))"
    )
  reviewCount: Int
    @cypher (
      statement: "MATCH (this)-[:WROTE]->(r:Review) RETURN count(r)"
    )
  reviews: [Review] @relation(name: "WROTE", direction: "OUT")
  categories: [MarketCategory] @relation(name: "DESCRIBES", direction: "IN")
}

type Vehicle {
  id: Int!
  make: String
  model: String
  year: String
  images: [String]
  fuel: [String]
  hpMin: Int
  hpMax: Int
  cylindersMin: Int
  cylindersMax: Int
  trany: [String]
  drivenWheels: [String]
  doorsMax: Int
  doorsMin: Int
  size: String
  highwayMpgMin: Float
  highwayMpgMax: Float
  cityMpgMin: Float
  cityMpgMax: Float
  popularity: Int
  minMsrp: Int
  maxMsrp: Int
  reviews: [Review] @relation(name: "IS_ABOUT", direction: "IN")
  avgStars: Float 
    @cypher (
      statement: "MATCH (r:Review)-[:IS_ABOUT]->(this) RETURN toFloat(avg(r.starsRating))"
    )
}

type Review {
  id: Int!
  starsRating: Int
  reviewText: String
  writtenBy: User @relation(name: "WROTE", direction: "IN")
  vehicle: Vehicle @relation(name: "IS_ABOUT", direction: "OUT")
  createdAt: String
}

type MarketCategory {
  name: String!
  vehicles: [Vehicle] @relation(name: "DESCRIBES", direction: "OUT")
  vehicleCount: Int
    @cypher(
      statement: "MATCH (this)-[:DESCRIBES]->(v:Vehicle) RETURN count(v)"
    )
}

type Occupation {
  name: String!
  users: [User] @relation(name: "MEMBER_OF", direction: "IN")
}

type Region {
  name: String!
  users: [User] @relation(name: "MEMBER_OF", direction: "IN")
}

type AgeGroup {
  name: String!
  users: [User] @relation(name: "MEMBER_OF", direction: "IN")
}

type Manufacturer {
  name: String!
  vehicles: [Vehicle] @relation(name: "MAKES", direction: "OUT")
  vehicleCount: Int
    @cypher(
      statement: "MATCH (this)-[:MAKES]->(v:Vehicle) RETURN count(v)"
    )
}

type Query {
  usersBySubstring(substring: String): [User]
    @cypher(
      statement: "MATCH (u:User) WHERE u.firstName CONTAINS $substring RETURN u"
    )

  vehiclesBySubstring(substring: String): [Vehicle]
    @cypher(
      statement: "MATCH (v:Vehicle) WHERE (v.make + ' ' + v.model) CONTAINS $substring RETURN v"
    )

  vehicleByTags(searchTags: [String], manufacturers: [String]): [Vehicle]
    @cypher(
      statement: """
        WITH $searchTags as tags, $manufacturers as makers
        MATCH (cat:MarketCategory)-[:DESCRIBES]->(v:Vehicle)
        WHERE (v.make IN makers OR size(makers) = 0) 
          AND (cat.name IN tags OR size(tags) = 0)
        RETURN v
      """
    )

  vehiclesTopN: [Vehicle]
    @cypher(
      statement: """
        MATCH (review:Review)-[:IS_ABOUT]->(car:Vehicle)
        WITH car, count(review) as reviewCount, avg(review.starsRating) as avgStars 
        WHERE reviewCount > 1 RETURN car ORDER BY avgStars DESC
      """
    )
  
  user(id: Int, _id: Int): User
  
  vehicle(id: Int, _id: Int): Vehicle
  
  manufacturer(name: String, _id: Int): Manufacturer

  hasUserReviewedVehicle(userId: Int!, vehicleId: Int!): Boolean
    @cypher(
      statement: """
        MATCH (u:User)-[:WROTE]->(r:Review)-[:IS_ABOUT]->(v:Vehicle)
        WHERE ID(u) = toInteger($userId) and ID(v) = toInteger($vehicleId)
        RETURN count(r) > 0
      """
    )
}

input ReviewInput {
  starsRating: Int
  reviewText: String
}

type Mutation {
    newReview(userId: Int!, vehicleId: Int!, review: ReviewInput!): Review
      @cypher(
        statement: """
          MATCH (user:User) WHERE ID(user) = toInteger($userId)
          MATCH (vehicle:Vehicle) WHERE ID(vehicle) = toInteger($vehicleId)
          CREATE (newReview:Review { starsRating: $review.starsRating, reviewText: $review.reviewText }) 
          CREATE (user)-[:WROTE]->(newReview)-[:IS_ABOUT]->(vehicle)
          RETURN newReview
        """
      )
}