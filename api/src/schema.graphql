type User {
  id: Int!,
  firstName: String
  lastName: String
  email: String
  avatar: String
  gender: String
  dateOfBirth: String
  avgStars: Float 
    @cypher (
      statement: "MATCH (this)-[:WROTE]->(r:Review) RETURN toFloat(avg(r.starsRating))"
    )
  reviewCount: Int
    @cypher (
      statement: "MATCH (this)-[:WROTE]->(r:Review) RETURN count(r)"
    )
  reviews: [Review] @relation(name: "WROTE", direction: "OUT")
}

type Vehicle {
  id: Int!
  make: String
  model: String
  year: String
  images: [String]
  fuel: [String]
  hpMin: Int
  hpMax: Int
  cylindersMin: Int
  cylindersMax: Int
  trany: [String]
  drivenWheels: [String]
  doorsMax: Int
  doorsMin: Int
  size: String
  highwayMpgMin: Float
  highwayMpgMax: Float
  cityMpgMin: Float
  cityMpgMax: Float
  popularity: Int
  minMsrp: Int
  maxMsrp: Int
  reviews: [Review] @relation(name: "IS_ABOUT", direction: "IN")
  avgStars: Float 
    @cypher (
      statement: "MATCH (r:Review)-[:IS_ABOUT]->(this) RETURN toFloat(avg(r.starsRating))"
    )
}

type Review {
  id: Int!
  starsRating: Int
  reviewText: String
  writtenBy: User @relation(name: "WROTE", direction: "IN")
  vehicle: Vehicle @relation(name: "IS_ABOUT", direction: "OUT")
  createdAt: String
}

type Occupation {
  name: String!
  users: [User] @relation(name: "MEMBER_OF", direction: "IN")
}

type Location {
  name: String!
  users: [User] @relation(name: "MEMBER_OF", direction: "IN")
}

type AgeGroup {
  name: String!
  users: [User] @relation(name: "MEMBER_OF", direction: "IN")
}

type Manufacturer {
  name: String!
  vehicles: [Vehicle] @relation(name: "MAKES", direction: "OUT")
}

type Query {
  usersBySubstring(substring: String): [User]
    @cypher(
      statement: "MATCH (u:User) WHERE u.firstName CONTAINS $substring RETURN u"
    )
  
  user(id: Int!): User
  
  vehicle(id: Int!): Vehicle
  
  manufacturer(name: String!): Manufacturer
  
  vehiclesTopN(first: Int = 10, offset: Int = 0): [Vehicle]
    @cypher(
      statement: "MATCH (review:Review)-[:IS_ABOUT]->(car:Vehicle) WITH car, count(review) as reviewCount, avg(review.starsRating) as avgStars WHERE reviewCount > 1 RETURN car LIMIT $first SKIP $offset;
    )
}
